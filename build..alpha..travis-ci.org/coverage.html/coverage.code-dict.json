{"/home/travis/build/npmtest/node-npmtest-gitlab/test.js":"/* istanbul instrument in package npmtest_gitlab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitlab/lib.npmtest_gitlab.js":"/* istanbul instrument in package npmtest_gitlab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gitlab = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gitlab = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gitlab/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gitlab && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gitlab */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gitlab\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gitlab.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gitlab.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gitlab.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gitlab.__dirname + '/lib.npmtest_gitlab.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/index.js":"(function() {\n  var ApiV3;\n\n  ApiV3 = require('./ApiV3').ApiV3;\n\n  module.exports = function(options) {\n    return new ApiV3(options);\n  };\n\n  module.exports.ApiV3 = ApiV3;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/ApiV3.js":"(function() {\n  var ApiBaseHTTP, debug,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  debug = require('debug')('gitlab:ApiV3');\n\n  ApiBaseHTTP = require('./ApiBaseHTTP').ApiBaseHTTP;\n\n  module.exports.ApiV3 = (function(superClass) {\n    extend(ApiV3, superClass);\n\n    function ApiV3() {\n      this.handleOptions = bind(this.handleOptions, this);\n      return ApiV3.__super__.constructor.apply(this, arguments);\n    }\n\n    ApiV3.prototype.handleOptions = function() {\n      ApiV3.__super__.handleOptions.apply(this, arguments);\n      this.options.base_url = 'api/v3';\n      return debug(\"handleOptions()\");\n    };\n\n    return ApiV3;\n\n  })(ApiBaseHTTP);\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/ApiBaseHTTP.js":"(function() {\n  var ApiBase, debug, querystring, slumber,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  debug = require('debug')('gitlab:ApiBaseHTTP');\n\n  ApiBase = require('./ApiBase').ApiBase;\n\n  querystring = require('querystring');\n\n  slumber = require('slumber');\n\n  module.exports.ApiBaseHTTP = (function(superClass) {\n    extend(ApiBaseHTTP, superClass);\n\n    function ApiBaseHTTP() {\n      this.patch = bind(this.patch, this);\n      this.put = bind(this.put, this);\n      this.post = bind(this.post, this);\n      this[\"delete\"] = bind(this[\"delete\"], this);\n      this.get = bind(this.get, this);\n      this.fn_wrapper = bind(this.fn_wrapper, this);\n      this.prepare_opts = bind(this.prepare_opts, this);\n      this.init = bind(this.init, this);\n      this.handleOptions = bind(this.handleOptions, this);\n      return ApiBaseHTTP.__super__.constructor.apply(this, arguments);\n    }\n\n    ApiBaseHTTP.prototype.handleOptions = function() {\n      var base, base1, base2;\n      ApiBaseHTTP.__super__.handleOptions.apply(this, arguments);\n      if ((base = this.options).base_url == null) {\n        base.base_url = '';\n      }\n      if (!this.options.url) {\n        throw \"`url` is mandatory\";\n      }\n      if (!(this.options.token || this.options.oauth_token)) {\n        throw \"`private_token` or `oauth_token` is mandatory\";\n      }\n      if ((base1 = this.options).slumber == null) {\n        base1.slumber = {};\n      }\n      if ((base2 = this.options.slumber).append_slash == null) {\n        base2.append_slash = false;\n      }\n      this.options.url = this.options.url.replace(/\\/api\\/v3/, '');\n      if (this.options.auth != null) {\n        this.options.slumber.auth = this.options.auth;\n      }\n      return debug(\"handleOptions()\");\n    };\n\n    ApiBaseHTTP.prototype.init = function() {\n      var api;\n      ApiBaseHTTP.__super__.init.apply(this, arguments);\n      api = slumber.API(this.options.url, this.options.slumber);\n      return this.slumber = api(this.options.base_url);\n    };\n\n    ApiBaseHTTP.prototype.prepare_opts = function(opts) {\n      if (opts.__query == null) {\n        opts.__query = {};\n      }\n      if (this.options.token) {\n        opts.headers = {\n          'PRIVATE-TOKEN': this.options.token\n        };\n      } else {\n        opts.headers = {\n          'Authorization': 'Bearer ' + this.options.oauth_token\n        };\n      }\n      return opts;\n    };\n\n    ApiBaseHTTP.prototype.fn_wrapper = function(fn) {\n      return (function(_this) {\n        return function(err, response, ret) {\n          var arity;\n          arity = fn.length;\n          switch (arity) {\n            case 1:\n              return fn(ret);\n            case 2:\n              return fn(err, ret || JSON.parse(response.body).message);\n            case 3:\n              return fn(err, response, ret);\n          }\n        };\n      })(this);\n    };\n\n    ApiBaseHTTP.prototype.get = function(path, query, fn) {\n      var opts;\n      if (query == null) {\n        query = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof query) {\n        fn = query;\n        query = {};\n      }\n      opts = this.prepare_opts(query);\n      return this.slumber(path).get(opts, this.fn_wrapper(fn));\n    };\n\n    ApiBaseHTTP.prototype[\"delete\"] = function(path, fn) {\n      var opts;\n      if (fn == null) {\n        fn = null;\n      }\n      opts = this.prepare_opts({});\n      return this.slumber(path)[\"delete\"](opts, this.fn_wrapper(fn));\n    };\n\n    ApiBaseHTTP.prototype.post = function(path, data, fn) {\n      var opts;\n      if (data == null) {\n        data = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      opts = this.prepare_opts(data);\n      return this.slumber(path).post(opts, this.fn_wrapper(fn));\n    };\n\n    ApiBaseHTTP.prototype.put = function(path, data, fn) {\n      var opts;\n      if (data == null) {\n        data = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      opts = this.prepare_opts(data);\n      return this.slumber(path).put(opts, this.fn_wrapper(fn));\n    };\n\n    ApiBaseHTTP.prototype.patch = function(path, data, fn) {\n      var opts;\n      if (data == null) {\n        data = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      opts = this.prepare_opts(data);\n      return this.slumber(path).patch(opts, this.fn_wrapper(fn));\n    };\n\n    return ApiBaseHTTP;\n\n  })(ApiBase);\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/ApiBase.js":"(function() {\n  var debug,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  debug = require('debug')('gitlab:ApiBase');\n\n  module.exports.ApiBase = (function() {\n    function ApiBase(options) {\n      this.options = options;\n      this.init = bind(this.init, this);\n      this.handleOptions = bind(this.handleOptions, this);\n      this.handleOptions();\n      this.init();\n      debug(\"constructor()\");\n    }\n\n    ApiBase.prototype.handleOptions = function() {\n      var base;\n      if ((base = this.options).verbose == null) {\n        base.verbose = false;\n      }\n      return debug(\"handleOptions()\");\n    };\n\n    ApiBase.prototype.init = function() {\n      this.client = this;\n      debug(\"init()\");\n      this.groups = require('./Models/Groups')(this.client);\n      this.projects = require('./Models/Projects')(this.client);\n      this.issues = require('./Models/Issues')(this.client);\n      this.notes = require('./Models/Notes')(this.client);\n      this.users = require('./Models/Users')(this.client);\n      return this.labels = require('./Models/Labels')(this.client);\n    };\n\n    return ApiBase;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/BaseModel.js":"(function() {\n  var debug,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  debug = require('debug')('gitlab:BaseModel');\n\n  module.exports = (function() {\n    function exports(client) {\n      this.client = client;\n      this._init = bind(this._init, this);\n      this.load = bind(this.load, this);\n      this._init();\n    }\n\n    exports.prototype.load = function(model) {\n      return require(\"./Models/\" + model)(this.client);\n    };\n\n    exports.prototype._init = function() {\n      this.debug = require('debug')(\"gitlab:Models:\" + this.constructor.name);\n      this.get = this.client.get;\n      this.post = this.client.post;\n      this.put = this.client.put;\n      this[\"delete\"] = this.client[\"delete\"];\n      if (this.init != null) {\n        return this.init();\n      }\n    };\n\n    return exports;\n\n  })();\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Utils.js":"(function() {\n  var Utils;\n\n  Utils = (function() {\n    function Utils() {}\n\n    Utils.parseProjectId = function(projectId) {\n      if (typeof projectId === \"number\") {\n        return projectId;\n      } else if (projectId.indexOf(\"/\") !== -1) {\n        return projectId = encodeURIComponent(projectId);\n      } else {\n        return projectId = parseInt(projectId);\n      }\n    };\n\n    return Utils;\n\n  })();\n\n  module.exports = Utils;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/Groups.js":"(function() {\n  var BaseModel, Groups,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Groups = (function(superClass) {\n    extend(Groups, superClass);\n\n    function Groups() {\n      this.search = bind(this.search, this);\n      this.addProject = bind(this.addProject, this);\n      this.create = bind(this.create, this);\n      this.addMember = bind(this.addMember, this);\n      this.listMembers = bind(this.listMembers, this);\n      this.listProjects = bind(this.listProjects, this);\n      this.show = bind(this.show, this);\n      this.all = bind(this.all, this);\n      this.init = bind(this.init, this);\n      return Groups.__super__.constructor.apply(this, arguments);\n    }\n\n    Groups.prototype.init = function() {\n      return this.access_levels = {\n        GUEST: 10,\n        REPORTER: 20,\n        DEVELOPER: 30,\n        MASTER: 40,\n        OWNER: 50\n      };\n    };\n\n    Groups.prototype.all = function(params, fn) {\n      var cb, data;\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      this.debug(\"Groups::all()\");\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      data = [];\n      cb = (function(_this) {\n        return function(err, retData) {\n          if (err) {\n            if (fn) {\n              return fn(retData || data);\n            }\n          } else if (retData.length === params.per_page) {\n            _this.debug(\"Recurse Groups::all()\");\n            data = data.concat(retData);\n            params.page++;\n            return _this.get(\"groups\", params, cb);\n          } else {\n            data = data.concat(retData);\n            if (fn) {\n              return fn(data);\n            }\n          }\n        };\n      })(this);\n      return this.get(\"groups\", params, cb);\n    };\n\n    Groups.prototype.show = function(groupId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Groups::show()\");\n      return this.get(\"groups/\" + (parseInt(groupId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Groups.prototype.listProjects = function(groupId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Groups::listProjects()\");\n      return this.get(\"groups/\" + (parseInt(groupId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data.projects);\n          }\n        };\n      })(this));\n    };\n\n    Groups.prototype.listMembers = function(groupId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Groups::listMembers()\");\n      return this.get(\"groups/\" + (parseInt(groupId)) + \"/members\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Groups.prototype.addMember = function(groupId, userId, accessLevel, fn) {\n      var checkAccessLevel, params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"addMember(\" + groupId + \", \" + userId + \", \" + accessLevel + \")\");\n      checkAccessLevel = (function(_this) {\n        return function() {\n          var access_level, k, ref;\n          ref = _this.access_levels;\n          for (k in ref) {\n            access_level = ref[k];\n            if (accessLevel === access_level) {\n              return true;\n            }\n          }\n          return false;\n        };\n      })(this);\n      if (!checkAccessLevel()) {\n        throw \"`accessLevel` must be one of \" + (JSON.stringify(this.access_levels));\n      }\n      params = {\n        user_id: userId,\n        access_level: accessLevel\n      };\n      return this.post(\"groups/\" + (parseInt(groupId)) + \"/members\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Groups.prototype.create = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Groups::create()\");\n      return this.post(\"groups\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Groups.prototype.addProject = function(groupId, projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Groups::addProject(\" + groupId + \", \" + projectId + \")\");\n      return this.post(\"groups/\" + (parseInt(groupId)) + \"/projects/\" + (parseInt(projectId)), null, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Groups.prototype.search = function(nameOrPath, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Groups::search(\" + nameOrPath + \")\");\n      params = {\n        search: nameOrPath\n      };\n      return this.get(\"groups\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    return Groups;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new Groups(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/IssueNotes.js":"(function() {\n  var BaseModel, IssueNotes, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  IssueNotes = (function(superClass) {\n    extend(IssueNotes, superClass);\n\n    function IssueNotes() {\n      this.all = bind(this.all, this);\n      return IssueNotes.__super__.constructor.apply(this, arguments);\n    }\n\n    IssueNotes.prototype.all = function(projectId, issueId, params, fn) {\n      var cb, data;\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"IssueNotes::notes()\");\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      data = [];\n      cb = (function(_this) {\n        return function(err, retData) {\n          if (err) {\n            if (fn) {\n              return fn(data);\n            }\n          } else if (retData.length === params.per_page) {\n            _this.debug(\"Recurse IssueNotes::all()\");\n            data = data.concat(retData);\n            params.page++;\n            return _this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/issues/\" + (parseInt(issueId)) + \"/notes\", params, cb);\n          } else {\n            data = data.concat(retData);\n            if (fn) {\n              return fn(data);\n            }\n          }\n        };\n      })(this);\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/issues/\" + (parseInt(issueId)) + \"/notes\", params, cb);\n    };\n\n    return IssueNotes;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new IssueNotes(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/Issues.js":"(function() {\n  var BaseModel, Issues,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Issues = (function(superClass) {\n    extend(Issues, superClass);\n\n    function Issues() {\n      this.edit = bind(this.edit, this);\n      this.create = bind(this.create, this);\n      this.show = bind(this.show, this);\n      this.all = bind(this.all, this);\n      return Issues.__super__.constructor.apply(this, arguments);\n    }\n\n    Issues.prototype.all = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      this.debug(\"Issues::all()\");\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      return (function() {\n        var cb, data;\n        data = [];\n        cb = (function(_this) {\n          return function(retData) {\n            if (retData.length === params.per_page) {\n              _this.debug(\"Recurse Issues::all()\");\n              data = data.concat(retData);\n              params.page++;\n              return _this.get(\"issues\", params, cb);\n            } else {\n              data = data.concat(retData);\n              if (fn) {\n                return fn(data);\n              }\n            }\n          };\n        })(this);\n        return this.get(\"issues\", params, cb);\n      }).bind(this)();\n    };\n\n    Issues.prototype.show = function(projectId, issueId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Issues::show()\");\n      if (projectId.toString().indexOf(\"/\") !== -1) {\n        projectId = encodeURIComponent(projectId);\n      } else {\n        projectId = parseInt(projectId);\n      }\n      if (issueId.toString().indexOf(\"/\") !== -1) {\n        issueId = encodeURIComponent(issueId);\n      } else {\n        issueId = parseInt(issueId);\n      }\n      return this.get(\"projects/\" + projectId + \"/issues/\" + issueId, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Issues.prototype.create = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Issues::create()\");\n      if (projectId.toString().indexOf(\"/\") !== -1) {\n        projectId = encodeURIComponent(projectId);\n      } else {\n        projectId = parseInt(projectId);\n      }\n      return this.post(\"projects/\" + projectId + \"/issues\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Issues.prototype.edit = function(projectId, issueId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Issues::edit()\");\n      if (projectId.toString().indexOf(\"/\") !== -1) {\n        projectId = encodeURIComponent(projectId);\n      } else {\n        projectId = parseInt(projectId);\n      }\n      if (issueId.toString().indexOf(\"/\") !== -1) {\n        issueId = encodeURIComponent(issueId);\n      } else {\n        issueId = parseInt(issueId);\n      }\n      return this.put(\"projects/\" + projectId + \"/issues/\" + issueId, params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    return Issues;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new Issues(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/Labels.js":"(function() {\n  var BaseModel, Labels, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  Labels = (function(superClass) {\n    extend(Labels, superClass);\n\n    function Labels() {\n      this.create = bind(this.create, this);\n      return Labels.__super__.constructor.apply(this, arguments);\n    }\n\n    Labels.prototype.create = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Labels::create()\");\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/labels\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    return Labels;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new Labels(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/Notes.js":"(function() {\n  var BaseModel, Notes, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  Notes = (function(superClass) {\n    extend(Notes, superClass);\n\n    function Notes() {\n      this.create = bind(this.create, this);\n      return Notes.__super__.constructor.apply(this, arguments);\n    }\n\n    Notes.prototype.create = function(projectId, issueId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Notes::create()\");\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/issues/\" + (parseInt(issueId)) + \"/notes\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    return Notes;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new Notes(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectBuilds.js":"(function() {\n  var BaseModel, ProjectBuilds, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectBuilds = (function(superClass) {\n    extend(ProjectBuilds, superClass);\n\n    function ProjectBuilds() {\n      this.triggerBuild = bind(this.triggerBuild, this);\n      this.showBuild = bind(this.showBuild, this);\n      this.listBuilds = bind(this.listBuilds, this);\n      return ProjectBuilds.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectBuilds.prototype.listBuilds = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listBuilds()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/builds\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectBuilds.prototype.showBuild = function(projectId, buildId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::build()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/builds/\" + buildId, null, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectBuilds.prototype.triggerBuild = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::triggerBuild()\");\n      return this.post(\"projects/\" + (Utils.parseProjectId(params.projectId)) + \"/trigger/builds\", params, null, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectBuilds;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectBuilds(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectDeployKeys.js":"(function() {\n  var BaseModel, ProjectKeys, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectKeys = (function(superClass) {\n    extend(ProjectKeys, superClass);\n\n    function ProjectKeys() {\n      this.addKey = bind(this.addKey, this);\n      this.getKey = bind(this.getKey, this);\n      this.listKeys = bind(this.listKeys, this);\n      return ProjectKeys.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectKeys.prototype.listKeys = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"ProjectKeys::listKeys()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/keys\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectKeys.prototype.getKey = function(projectId, keyId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"ProjectKeys::getKey()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/keys/\" + (parseInt(keyId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectKeys.prototype.addKey = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"ProjectKeys::addKey()\");\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/keys\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectKeys;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectKeys(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectHooks.js":"(function() {\n  var BaseModel, ProjectHooks, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectHooks = (function(superClass) {\n    extend(ProjectHooks, superClass);\n\n    function ProjectHooks() {\n      this.remove = bind(this.remove, this);\n      this.update = bind(this.update, this);\n      this.add = bind(this.add, this);\n      this.show = bind(this.show, this);\n      this.list = bind(this.list, this);\n      return ProjectHooks.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectHooks.prototype.list = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::hooks()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/hooks\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectHooks.prototype.show = function(projectId, hookId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::hook()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/hooks/\" + (parseInt(hookId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectHooks.prototype.add = function(projectId, params, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      if ('string' === typeof params) {\n        params = {\n          url: params\n        };\n      }\n      this.debug(\"Projects::addHook()\");\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/hooks\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectHooks.prototype.update = function(projectId, hookId, url, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::saveHook()\");\n      params = {\n        access_level: parseInt(accessLevel)\n      };\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/hooks/\" + (parseInt(hookId)), params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectHooks.prototype.remove = function(projectId, hookId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::removeHook()\");\n      return this[\"delete\"](\"projects/\" + (Utils.parseProjectId(projectId)) + \"/hooks/\" + (parseInt(hookId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectHooks;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectHooks(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectIssues.js":"(function() {\n  var BaseModel, ProjectIssues, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectIssues = (function(superClass) {\n    extend(ProjectIssues, superClass);\n\n    function ProjectIssues() {\n      this.list = bind(this.list, this);\n      this.init = bind(this.init, this);\n      return ProjectIssues.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectIssues.prototype.init = function() {\n      return this.notes = this.load('IssueNotes');\n    };\n\n    ProjectIssues.prototype.list = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"ProjectIssues::issues()\");\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      return (function() {\n        var cb, data;\n        data = [];\n        cb = (function(_this) {\n          return function(err, retData) {\n            if (err) {\n              if (fn) {\n                return fn(data);\n              }\n            }\n            if (retData.length === params.per_page) {\n              _this.debug(\"Recurse ProjectIssues::list()\");\n              data = data.concat(retData);\n              params.page++;\n              return _this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/issues\", params, cb);\n            } else {\n              data = data.concat(retData);\n              if (fn) {\n                return fn(data);\n              }\n            }\n          };\n        })(this);\n        return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/issues\", params, cb);\n      }).bind(this)();\n    };\n\n    return ProjectIssues;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectIssues(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectLabels.js":"(function() {\n  var BaseModel, ProjectLabels, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectLabels = (function(superClass) {\n    extend(ProjectLabels, superClass);\n\n    function ProjectLabels() {\n      this.all = bind(this.all, this);\n      return ProjectLabels.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectLabels.prototype.all = function(projectId, params, fn) {\n      var cb, data;\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"ProjectLabels::labels()\");\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      data = [];\n      cb = (function(_this) {\n        return function(err, retData) {\n          if (err) {\n            if (fn) {\n              return fn(data);\n            }\n          } else if (retData.length === params.per_page) {\n            _this.debug(\"Recurse ProjectLabels::all()\");\n            data = data.concat(retData);\n            params.page++;\n            return _this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/labels\", params, cb);\n          } else {\n            data = data.concat(retData);\n            if (fn) {\n              return fn(data);\n            }\n          }\n        };\n      })(this);\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/labels\", params, cb);\n    };\n\n    return ProjectLabels;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectLabels(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectMembers.js":"(function() {\n  var BaseModel, ProjectMembers, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectMembers = (function(superClass) {\n    extend(ProjectMembers, superClass);\n\n    function ProjectMembers() {\n      this.remove = bind(this.remove, this);\n      this.update = bind(this.update, this);\n      this.add = bind(this.add, this);\n      this.show = bind(this.show, this);\n      this.list = bind(this.list, this);\n      return ProjectMembers.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectMembers.prototype.list = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::members()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/members\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMembers.prototype.show = function(projectId, userId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::member()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/members/\" + (parseInt(userId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMembers.prototype.add = function(projectId, userId, accessLevel, fn) {\n      var params;\n      if (accessLevel == null) {\n        accessLevel = 30;\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::addMember()\");\n      params = {\n        user_id: parseInt(userId),\n        access_level: parseInt(accessLevel)\n      };\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/members\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMembers.prototype.update = function(projectId, userId, accessLevel, fn) {\n      var params;\n      if (accessLevel == null) {\n        accessLevel = 30;\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::saveMember()\");\n      params = {\n        access_level: parseInt(accessLevel)\n      };\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/members/\" + (parseInt(userId)), params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMembers.prototype.remove = function(projectId, userId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::removeMember()\");\n      return this[\"delete\"](\"projects/\" + (Utils.parseProjectId(projectId)) + \"/members/\" + (parseInt(userId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectMembers;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectMembers(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectMergeRequests.js":"(function() {\n  var BaseModel, ProjectMergeRequests, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectMergeRequests = (function(superClass) {\n    extend(ProjectMergeRequests, superClass);\n\n    function ProjectMergeRequests() {\n      this.comment = bind(this.comment, this);\n      this.update = bind(this.update, this);\n      this.add = bind(this.add, this);\n      this.show = bind(this.show, this);\n      this.list = bind(this.list, this);\n      return ProjectMergeRequests.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectMergeRequests.prototype.list = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      this.debug(\"Projects::mergerequests()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/merge_requests\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMergeRequests.prototype.show = function(projectId, mergerequestId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::mergerequest()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/merge_request/\" + (parseInt(mergerequestId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMergeRequests.prototype.add = function(projectId, sourceBranch, targetBranch, assigneeId, title, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::addMergeRequest()\");\n      params = {\n        id: Utils.parseProjectId(projectId),\n        source_branch: sourceBranch,\n        target_branch: targetBranch,\n        title: title\n      };\n      if (assigneeId !== void 0) {\n        params.assignee_id = parseInt(assigneeId);\n      }\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/merge_requests\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMergeRequests.prototype.update = function(projectId, mergerequestId, params, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::saveMergeRequest()\");\n      params.id = Utils.parseProjectId(projectId);\n      params.merge_request_id = parseInt(mergerequestId);\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/merge_request/\" + (parseInt(mergerequestId)), params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMergeRequests.prototype.comment = function(projectId, mergerequestId, note, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::commentMergeRequest()\");\n      params = {\n        id: Utils.parseProjectId(projectId),\n        merge_request_id: parseInt(mergerequestId),\n        note: note\n      };\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/merge_request/\" + (parseInt(mergerequestId)) + \"/comments\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectMergeRequests;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectMergeRequests(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectMilestones.js":"(function() {\n  var BaseModel, ProjectMilestones, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectMilestones = (function(superClass) {\n    var list;\n\n    extend(ProjectMilestones, superClass);\n\n    function ProjectMilestones() {\n      this.update = bind(this.update, this);\n      this.add = bind(this.add, this);\n      this.show = bind(this.show, this);\n      this.all = bind(this.all, this);\n      return ProjectMilestones.__super__.constructor.apply(this, arguments);\n    }\n\n    list = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      console.log('DEPRECATED: milestone.list. Use milestone.all instead');\n      return this.all.apply(this, arguments);\n    };\n\n    ProjectMilestones.prototype.all = function(projectId, fn) {\n      var cb, data, params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::Milestones::all()\");\n      params = {};\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      data = [];\n      cb = (function(_this) {\n        return function(err, retData) {\n          if (err) {\n            if (fn) {\n              return fn(retData || data);\n            }\n          } else if (retData.length === params.per_page) {\n            _this.debug(\"Recurse Projects::Milestones::all()\");\n            data = data.concat(retData);\n            params.page++;\n            return _this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/milestones\", params, cb);\n          } else {\n            data = data.concat(retData);\n            if (fn) {\n              return fn(data);\n            }\n          }\n        };\n      })(this);\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/milestones\", params, cb);\n    };\n\n    ProjectMilestones.prototype.show = function(projectId, milestoneId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::milestone()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/milestones/\" + (parseInt(milestoneId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMilestones.prototype.add = function(projectId, title, description, due_date, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::addMilestone()\");\n      params = {\n        id: Utils.parseProjectId(projectId),\n        title: title,\n        description: description,\n        due_date: due_date\n      };\n      return this.post(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/milestones\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectMilestones.prototype.update = function(projectId, milestoneId, title, description, due_date, state_event, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::editMilestone()\");\n      params = {\n        id: Utils.parseProjectId(projectId),\n        title: title,\n        description: description,\n        due_date: due_date,\n        state_event: state_event\n      };\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/milestones/\" + (parseInt(milestoneId)), params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectMilestones;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectMilestones(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectRepository.js":"(function() {\n  var BaseModel, ProjectRepository, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectRepository = (function(superClass) {\n    extend(ProjectRepository, superClass);\n\n    function ProjectRepository() {\n      this.compare = bind(this.compare, this);\n      this.updateFile = bind(this.updateFile, this);\n      this.createFile = bind(this.createFile, this);\n      this.showFile = bind(this.showFile, this);\n      this.listTree = bind(this.listTree, this);\n      this.diffCommit = bind(this.diffCommit, this);\n      this.showCommit = bind(this.showCommit, this);\n      this.listCommits = bind(this.listCommits, this);\n      this.listTags = bind(this.listTags, this);\n      this.addTag = bind(this.addTag, this);\n      this.deleteBranch = bind(this.deleteBranch, this);\n      this.createBranch = bind(this.createBranch, this);\n      this.unprotectBranch = bind(this.unprotectBranch, this);\n      this.protectBranch = bind(this.protectBranch, this);\n      this.showBranch = bind(this.showBranch, this);\n      this.listBranches = bind(this.listBranches, this);\n      return ProjectRepository.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectRepository.prototype.listBranches = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listBranches()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/branches\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.showBranch = function(projectId, branchId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::branch()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/branches/\" + (encodeURI(branchId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.protectBranch = function(projectId, branchId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::protectBranch()\");\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/branches/\" + (encodeURI(branchId)) + \"/protect\", null, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.unprotectBranch = function(projectId, branchId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::unprotectBranch()\");\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/branches/\" + (encodeURI(branchId)) + \"/unprotect\", null, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.createBranch = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::createBranch()\", params);\n      return this.post(\"projects/\" + (Utils.parseProjectId(params.projectId)) + \"/repository/branches\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.deleteBranch = function(projectId, branchId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::deleteBranch()\");\n      return this[\"delete\"](\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/branches/\" + (encodeURI(branchId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.addTag = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::addTag()\");\n      return this.post(\"projects/\" + (Utils.parseProjectId(params.id)) + \"/repository/tags\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.listTags = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listTags()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/tags\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.listCommits = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listCommits()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/commits\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.showCommit = function(projectId, commitId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::commit()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/branches/\" + (parseInt(commitId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.diffCommit = function(projectId, sha, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::diffCommit()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/commits/\" + sha + \"/diff\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.listTree = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listTree()\");\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/repository/tree\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.showFile = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = projectId;\n      } else {\n        params.projectId = projectId;\n      }\n      this.debug(\"Projects::showFile()\", params);\n      if (params.file_path && params.ref) {\n        return this.get(\"projects/\" + (Utils.parseProjectId(params.projectId)) + \"/repository/files\", params, (function(_this) {\n          return function(data) {\n            if (fn) {\n              return fn(data);\n            }\n          };\n        })(this));\n      } else if (params.file_path && params.file_id) {\n        return this.get((\"projects/\" + (Utils.parseProjectId(params.projectId)) + \"/repository/raw_blobs/\") + params.file_id, params, (function(_this) {\n          return function(data) {\n            if (fn) {\n              return fn(data);\n            }\n          };\n        })(this));\n      }\n    };\n\n    ProjectRepository.prototype.createFile = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::createFile()\", params);\n      return this.post(\"projects/\" + (Utils.parseProjectId(params.projectId)) + \"/repository/files\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.updateFile = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::updateFile()\", params);\n      return this.put(\"projects/\" + (Utils.parseProjectId(params.projectId)) + \"/repository/files\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectRepository.prototype.compare = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::compare()\", params);\n      return this.get(\"projects/\" + (Utils.parseProjectId(params.projectId)) + \"/repository/compare\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectRepository;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectRepository(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/ProjectServices.js":"(function() {\n  var BaseModel, ProjectServices, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  ProjectServices = (function(superClass) {\n    extend(ProjectServices, superClass);\n\n    function ProjectServices() {\n      this.remove = bind(this.remove, this);\n      this.update = bind(this.update, this);\n      this.show = bind(this.show, this);\n      return ProjectServices.__super__.constructor.apply(this, arguments);\n    }\n\n    ProjectServices.prototype.show = function(projectId, serviceName, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::showService()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/services/\" + serviceName, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectServices.prototype.update = function(projectId, serviceName, params, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::updateService()\");\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/services/\" + serviceName, params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    ProjectServices.prototype.remove = function(projectId, serviceName, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects:removeService()\");\n      return this[\"delete\"](\"projects/\" + (Utils.parseProjectId(projectId)) + \"/services/\" + serviceName, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return ProjectServices;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new ProjectServices(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/Projects.js":"(function() {\n  var BaseModel, Projects, Utils,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Utils = require('../Utils');\n\n  Projects = (function(superClass) {\n    extend(Projects, superClass);\n\n    function Projects() {\n      this.listTriggers = bind(this.listTriggers, this);\n      this.search = bind(this.search, this);\n      this.fork = bind(this.fork, this);\n      this.remove = bind(this.remove, this);\n      this.listTags = bind(this.listTags, this);\n      this.listCommits = bind(this.listCommits, this);\n      this.listMembers = bind(this.listMembers, this);\n      this.editMember = bind(this.editMember, this);\n      this.addMember = bind(this.addMember, this);\n      this.edit = bind(this.edit, this);\n      this.create_for_user = bind(this.create_for_user, this);\n      this.create = bind(this.create, this);\n      this.show = bind(this.show, this);\n      this.allAdmin = bind(this.allAdmin, this);\n      this.all = bind(this.all, this);\n      this.init = bind(this.init, this);\n      return Projects.__super__.constructor.apply(this, arguments);\n    }\n\n    Projects.prototype.init = function() {\n      this.members = this.load('ProjectMembers');\n      this.hooks = this.load('ProjectHooks');\n      this.issues = this.load('ProjectIssues');\n      this.labels = this.load('ProjectLabels');\n      this.repository = this.load('ProjectRepository');\n      this.milestones = this.load('ProjectMilestones');\n      this.deploy_keys = this.load('ProjectDeployKeys');\n      this.merge_requests = this.load('ProjectMergeRequests');\n      this.services = this.load('ProjectServices');\n      return this.builds = this.load('ProjectBuilds');\n    };\n\n    Projects.prototype.all = function(params, fn) {\n      var cb, data;\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      this.debug(\"Projects::all()\");\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      data = [];\n      cb = (function(_this) {\n        return function(err, retData) {\n          if (err) {\n            if (fn) {\n              return fn(retData || data);\n            }\n          } else if (retData.length === params.per_page) {\n            _this.debug(\"Recurse Projects::all()\");\n            data = data.concat(retData);\n            params.page++;\n            return _this.get(\"projects\", params, cb);\n          } else {\n            data = data.concat(retData);\n            if (fn) {\n              return fn(data);\n            }\n          }\n        };\n      })(this);\n      return this.get(\"projects\", params, cb);\n    };\n\n    Projects.prototype.allAdmin = function(params, fn) {\n      var cb, data;\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      this.debug(\"Projects::allAdmin()\");\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      data = [];\n      cb = (function(_this) {\n        return function(err, retData) {\n          if (err) {\n            if (fn) {\n              return fn(retData || data);\n            }\n          } else if (retData.length === params.per_page) {\n            _this.debug(\"Recurse Projects::allAdmin()\");\n            data = data.concat(retData);\n            params.page++;\n            return _this.get(\"projects/all\", params, cb);\n          } else {\n            data = data.concat(retData);\n            if (fn) {\n              return fn(data);\n            }\n          }\n        };\n      })(this);\n      return this.get(\"projects/all\", params, cb);\n    };\n\n    Projects.prototype.show = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::show()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Projects.prototype.create = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::create()\");\n      return this.post(\"projects\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Projects.prototype.create_for_user = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::create_for_user()\");\n      return this.post(\"projects/user/\" + params.user_id, params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Projects.prototype.edit = function(projectId, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::edit()\");\n      return this.put(\"projects/\" + (Utils.parseProjectId(projectId)), params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Projects.prototype.addMember = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::addMember()\");\n      return this.post(\"projects/\" + params.id + \"/members\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Projects.prototype.editMember = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::editMember()\");\n      return this.put(\"projects/\" + params.id + \"/members/\" + params.user_id, params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Projects.prototype.listMembers = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listMembers()\");\n      return this.get(\"projects/\" + params.id + \"/members\", function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Projects.prototype.listCommits = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listCommits()\");\n      return this.get(\"projects/\" + params.id + \"/repository/commits\", params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Projects.prototype.listTags = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listTags()\");\n      return this.get(\"projects/\" + params.id + \"/repository/tags\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Projects.prototype.remove = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::remove()\");\n      return this[\"delete\"](\"projects/\" + (Utils.parseProjectId(projectId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Projects.prototype.fork = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::fork()\");\n      return this.post(\"projects/fork/\" + params.id, params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Projects.prototype.search = function(projectName, params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      this.debug(\"Projects::search()\");\n      return this.get(\"projects/search/\" + projectName, params, (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Projects.prototype.listTriggers = function(projectId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Projects::listTriggers()\");\n      return this.get(\"projects/\" + (Utils.parseProjectId(projectId)) + \"/triggers\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    return Projects;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new Projects(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/UserKeys.js":"(function() {\n  var BaseModel, UserKeys,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  UserKeys = (function(superClass) {\n    extend(UserKeys, superClass);\n\n    function UserKeys() {\n      this.addKey = bind(this.addKey, this);\n      this.all = bind(this.all, this);\n      return UserKeys.__super__.constructor.apply(this, arguments);\n    }\n\n    UserKeys.prototype.all = function(userId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      return this.get(\"users/\" + (parseInt(userId)) + \"/keys\", (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    UserKeys.prototype.addKey = function(userId, title, key, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      params = {\n        title: title,\n        key: key\n      };\n      return this.post(\"users/\" + userId + \"/keys\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    return UserKeys;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new UserKeys(client);\n  };\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-gitlab/node_modules/gitlab/lib/Models/Users.js":"(function() {\n  var BaseModel, Users,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  BaseModel = require('../BaseModel');\n\n  Users = (function(superClass) {\n    extend(Users, superClass);\n\n    function Users() {\n      this.search = bind(this.search, this);\n      this.session = bind(this.session, this);\n      this.create = bind(this.create, this);\n      this.show = bind(this.show, this);\n      this.current = bind(this.current, this);\n      this.all = bind(this.all, this);\n      this.init = bind(this.init, this);\n      return Users.__super__.constructor.apply(this, arguments);\n    }\n\n    Users.prototype.init = function() {\n      return this.keys = this.load('UserKeys');\n    };\n\n    Users.prototype.all = function(params, fn) {\n      var cb, data;\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      if ('function' === typeof params) {\n        fn = params;\n        params = {};\n      }\n      this.debug(\"Users::all()\");\n      if (params.page == null) {\n        params.page = 1;\n      }\n      if (params.per_page == null) {\n        params.per_page = 100;\n      }\n      data = [];\n      cb = (function(_this) {\n        return function(err, retData) {\n          if (err) {\n            if (fn) {\n              return fn(retData || data);\n            }\n          } else if (retData.length === params.per_page) {\n            _this.debug(\"Recurse Users::all()\");\n            data = data.concat(retData);\n            params.page++;\n            return _this.get(\"users\", params, cb);\n          } else {\n            data = data.concat(retData);\n            if (fn) {\n              return fn(data);\n            }\n          }\n        };\n      })(this);\n      return this.get(\"users\", params, cb);\n    };\n\n    Users.prototype.current = function(fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Users::current()\");\n      return this.get(\"user\", function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Users.prototype.show = function(userId, fn) {\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Users::show()\");\n      return this.get(\"users/\" + (parseInt(userId)), (function(_this) {\n        return function(data) {\n          if (fn) {\n            return fn(data);\n          }\n        };\n      })(this));\n    };\n\n    Users.prototype.create = function(params, fn) {\n      if (params == null) {\n        params = {};\n      }\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Users::create()\", params);\n      return this.post(\"users\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Users.prototype.session = function(email, password, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Users::session()\");\n      params = {\n        email: email,\n        password: password\n      };\n      return this.post(\"session\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    Users.prototype.search = function(emailOrUsername, fn) {\n      var params;\n      if (fn == null) {\n        fn = null;\n      }\n      this.debug(\"Users::search(\" + emailOrUsername + \")\");\n      params = {\n        search: emailOrUsername\n      };\n      return this.get(\"users\", params, function(data) {\n        if (fn) {\n          return fn(data);\n        }\n      });\n    };\n\n    return Users;\n\n  })(BaseModel);\n\n  module.exports = function(client) {\n    return new Users(client);\n  };\n\n}).call(this);\n"}